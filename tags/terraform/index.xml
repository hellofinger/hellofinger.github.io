<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Terraform - 标签 - Finger&#39;s Blog</title>
    <link>https://hellofinger.tech/tags/terraform/</link>
    <description>Terraform - 标签 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Mon, 03 Feb 2020 09:22:52 &#43;0800</lastBuildDate><atom:link href="https://hellofinger.tech/tags/terraform/" rel="self" type="application/rss+xml" /><item>
  <title>Terraform基础--模块基础</title>
  <link>https://hellofinger.tech/2020/02/terraform-modules/</link>
  <pubDate>Mon, 03 Feb 2020 09:22:52 &#43;0800</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/02/terraform-modules/</guid>
  <description><![CDATA[什么是Terraform ModuleModule 是 Terraform 为了管理单元化资源而设计的，是子节点，子资源，子架构模板的整合和抽象。在实际复杂的技术架构中，涉及到的资源多种多样，资源与资源之间的关系错综复杂，资源模版的编写，扩展，维护等多个问题的成本都会不断增加。将多种可以复用的资源定义为一个module，通过对 module 的管理简化模板的架构，降低模板管理的复杂度，这就是module的作用。
除此之外，对开发者和用户而言，只需关心 module 的 input 参数即可，无需关心module中资源的定义，参数，语法等细节问题，抽出更多的时间和精力投入到架构设计和资源关系整合上。
Module的标准结构官方建议Module标准结构包含：main.tf，variables.tf，outputs.tf，README.md。这些是最小模块的建议文件名，即使它们为空。
main.tf：资源的定义模板 variables.tf：模板所依赖的参数定义和参数值 outputs.tf：资源的输出值 README.md：模板的简单介绍和使用说明以及该模块可用的许可证 对于一个简单的模块，main.tf 是主要入口点。包含了创建资源的主要内容。对于复杂的模块，可以将资源创建分为多个文件，但是任何嵌套的模块调用都应位于主文件中。variables.tf 并且outputs.tf应分别包含变量和输出的声明。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # 简单的模块 $ basic-module/ . ├── README.md ├── main.tf ├── variables.tf ├── outputs.tf # 复杂的模块 $ complete-module/ . ├── README.]]></description>
</item>
<item>
  <title>Terraform基础--变量详解</title>
  <link>https://hellofinger.tech/2020/02/terraform-variables/</link>
  <pubDate>Sun, 02 Feb 2020 04:23:52 &#43;0800</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/02/terraform-variables/</guid>
  <description><![CDATA[定义变量创建 variables.tf文件，定义变量名为：aws_region。设置默认值：ap-southeast-1。默认值是可选的。如果未设置默认值，则该变量是必需的。
1 2 3 4 5 # variables.tf variable &#34;aws_region&#34; { default = &#34;ap-southeast-1&#34; } 注意：该文件可以命名为任何名称，因为Terraform加载目录下以*.tf结尾的所有文件。
使用变量通过使用占位符 ${}和var关键字引用定义的变量名。
1 2 3 provider &#34;aws&#34; { region = &#34;${var.aws_region}&#34; } 分配变量分配变量有多种方法。以变量的优先级考虑，从高到底的顺序主要的方法如下：
命令行可以直接在命令行中使用-var标志设置变量 。在该Terraform检查配置的任何命令接受该标志，如apply 和 plan。
1 2 terraform apply \ -var &#39;aws_region=ap-southeast-1&#39; 注意：以这种方式设置变量不会保存它们，并且在执行命令时必须重复输入它们。
*.tfvars 文件变量如果想保留变量或者变量是一个固定的值，可以考虑创建后缀为 *.tfvars的文件。文件内容如下：
1 2 3 # terraform.tfvars aws_region = &#34;ap-southeast-1&#34; 对于当前目录中匹配 terraform.tfvars 或 *.auto.tfvars 存在的所有文件，Terraform会自动加载它们以填充变量。如果文件名为其他名称，则可以-var-file直接使用该标志指定文件。这些文件与Terraform配置文件的语法相同。与Terraform配置文件一样，这些文件也可以是JSON。
1 terraform apply -var-file=&#34;xxx.tfvars&#34; 注意：不建议将用户名和密码保存到版本控制中，但是可以创建一个本地秘钥变量文件用-var-file加载。
-var-file 可以使用多次，指定不同的变量文件。例如：]]></description>
</item>
<item>
  <title>Terraform基础--基本语法</title>
  <link>https://hellofinger.tech/2020/02/terraform-basic/</link>
  <pubDate>Sat, 01 Feb 2020 11:17:52 &#43;0800</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/02/terraform-basic/</guid>
  <description><![CDATA[语法Terraform语言也就是HCL(HashiCorp Configuration Language)，是一种丰富的语言。他的语法结构类似于JSON语法。主要由参数和块构成。
参数1 2 ami = &#34;ami-061eb2b23f9f8839c&#34; instance_type = &#34;t2.micro&#34; 等号前的标识符是参数名称，等号后的表达式是参数的值。
代码块1 2 3 4 5 6 7 8 resource &#34;aws_instance&#34; &#34;example-instance&#34; { ami = &#34;ami-061eb2b23f9f8839c&#34; instance_type = &#34;t2.micro&#34; tags = { Name = &#34;Example by ChangSha Union&#34; } } 块具有类型(resource)，每一个块类型定义后需要定义多个标签，上述例子定义了 aws_instance和 example-instance 两个标签。特定的块类型可以具有任意数量的标签或者不需要标签名。aws_instance为第三方云资源的关键字，example-instance为自定义资源变量名。
块主体由 { 和 } 字符(大括号)分隔。在块里面可以嵌套其他变量和块。从而创建块及其相关变量的层次结构。
块可以出现在其他外部的terraform文件中。例如：a.tf 定义了某个变量块可以被b.tf引用。
标识符参数名，块类型名以及大多数特定于Terraform的结构(如资源，输入变量)的名称都是标识符。
标识符可以包含字母，数字，下划线（_）和连字符（-）。标识符的第一个字符不能为数字，这和编程语言规则相同。
注释# 单行或者结尾注释 // 单行注释，以替代# /* */ 多行注释 Terraform VS 传统函数将Terraform与传统函数(以JavaScript语法为例)比较。input variable相当于函数参数，local value类似于局部变量。而output类似于返回值。]]></description>
</item>
<item>
  <title>Terraform基础--Terraform是什么？</title>
  <link>https://hellofinger.tech/2020/01/what-is-terraform/</link>
  <pubDate>Mon, 06 Jan 2020 08:44:52 &#43;0800</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/01/what-is-terraform/</guid>
  <description><![CDATA[一、Terraform是什么？Terraform是一个开源基础架构，是HashiCorp创建的代码软件工具。它使用户能够使用称为HCL(HashiCorp Configuration Language)配置语言或可选的JSON来定义和配置数据中心基础架构。 HCL是声明式的，也就是说，程序员用HCL来描述整个基础架构应该是什么样的，然后把具体的实施工作交给Terraform就可以了，程序员不需要了解实施的具体步骤和细节，不需要了解terraform如何与云服务商的API进行对接。Terraform会根据代码，自动下载相应的Provider和Provisioner来负责具体步骤和细节。于声明式对应的是命令式。命令式语言是按照步骤执行的，先后顺序很重要，对固定输入执行命令式语言会得到固定的输出。声明式和命令式并无高下之分，只是在云资源编排这一领域，声明式会比较方便实现。
Terraform 支持许多云基础架构提供商，国外云如 Amazon Web Services，IBM Cloud（以前的 Bluemix），Google Cloud Platform，Linode， Microsoft Azure， Oracle 云基础架构或 VMware vSphere 以及 OpenStack。 国内云包括阿里，腾讯，华为，京东等云服务商。
Terraform 是一种安全有效地构建、更改和版本控制基础设施的工具(基础架构自动化的编排工具)。 以用来管理多层次的资源。从上层的软件配置到底层的网络、系统配置都可以使用 Terraform 统一进行管理。 它的目标是 &ldquo;Write, Plan, and create Infrastructure as Code&rdquo;, 基础架构即代码。
Terraform 几乎可以支持所有市面上能见到的云服务。具体的说就是可以用代码来管理维护 IT 资源，把之前需要手动操作的一部分任务通过程序来自动化的完成，这样的做的结果非常明显：高效、不易出错。
Terraform 提供了对资源和提供者的灵活抽象。该模型允许表示从物理硬件、虚拟机和容器到电子邮件和 DNS 提供者的所有内容。由于这种灵活性，Terraform 可以用来解决许多不同的问题。这意味着有许多现有的工具与Terraform 的功能重叠。但是需要注意的是，Terraform 与其他系统并不相互排斥。它可以用于管理小到单个应用程序或达到整个数据中心的不同对象。
Terraform 使用配置文件描述管理的组件(小到单个应用程序，达到整个数据中心)。Terraform 生成一个执行计划，描述它将做什么来达到所需的状态，然后执行它来构建所描述的基础结构。随着配置的变化，Terraform 能够确定发生了什么变化，并创建可应用的增量执行计划。
Terraform 通过插件机制管理不同的资源提供者，以此来接入各种资源，如虚拟机，存储，网络和各种应用服务。
Terraform 是用 Go 语言开发的开源项目，你可以在 github 上访问到它的源代码。
二、Terraform 特点2.1、基础架构即代码(Infrastructure as Code) 基础设施使用高级配置语法进行描述。这可以让你的数据中心蓝图像你其他代码一样进行版本控制和管理。此外基础设施可以被分享和重用。
2.2、执行计划(Execution Plans)
Terraform 有一个 plan 步骤，它生成一个执行计划。执行计划显示了当执行 apply 命令时 Terraform 将做什么。通过 plan 进行提前检查，可以使 Terraform 操作真正的基础结构时避免意外。]]></description>
</item>
<item>
  <title>Terraform基础--从一个简单的例子开始</title>
  <link>https://hellofinger.tech/2020/01/terraform-first-example/</link>
  <pubDate>Sat, 04 Jan 2020 11:44:52 &#43;0800</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/01/terraform-first-example/</guid>
  <description><![CDATA[安装Terraform1 2 3 4 5 # Step1, 下载适合您系统的Terraform安装包 wget https://releases.hashicorp.com/terraform/0.12.18/terraform_0.12.18_linux_amd64.zip # Step2, 解压该包，是一个名为terraform的二进制文件，可以在当前目录直接运行命令: terraform 1 2 # Step3, 将terraform加到环境变量。 export PATH=$PATH:/home/ubuntu/terraform:$PATH 1 2 $ terraform version Terraform v0.12.18 编写第一个Terraform例子我们在aws的新加坡(ap-southeast-1)区域创建一台实例类型为t2.micro的EC2，并标记一下Tag。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # main.tf provider &#34;aws&#34; { region = &#34;ap-southeast-1&#34; } resource &#34;aws_instance&#34; &#34;example-instance&#34; { ami = &#34;ami-061eb2b23f9f8839c&#34; instance_type = &#34;t2.micro&#34; tags = { Name = &#34;Example by ChangSha DevOps Union &#34; Terraform = true } } 1 2 3 4 5 6 ~/terraform-guide/example1$ tree .]]></description>
</item>
</channel>
</rss>
