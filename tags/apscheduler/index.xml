<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>APScheduler - 标签 - Finger&#39;s Blog</title>
    <link>https://hellofinger.tech/tags/apscheduler/</link>
    <description>APScheduler - 标签 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Sat, 23 Mar 2019 23:14:00 &#43;0000</lastBuildDate><atom:link href="https://hellofinger.tech/tags/apscheduler/" rel="self" type="application/rss+xml" /><item>
  <title>Flask-APScheduler 笔记</title>
  <link>https://hellofinger.tech/2019/03/flask-apscheduler-usage/</link>
  <pubDate>Sat, 23 Mar 2019 23:14:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2019/03/flask-apscheduler-usage/</guid>
  <description><![CDATA[简介Flask-APScheduler是Flask扩展，增加了对APScheduler的支持。
支持从Flask配置加载调度程序配置以及任务定义。 支持WEB程序和调度程序共存。提供REST API管理任务调度。并为REST API提供身份验证。目前只支持Basic-Auth认证。 官方地址：https://github.com/viniciuschiele/flask-apscheduler
使用1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from flask import Flask from flask_apscheduler import APScheduler class Config(object): JOBS = [ { &#39;id&#39;: &#39;job1&#39;, &#39;func&#39;: &#39;jobs:job1&#39;, &#39;args&#39;: (1, 2), &#39;trigger&#39;: &#39;interval&#39;, &#39;seconds&#39;: 10 } ] SCHEDULER_API_ENABLED = True def job1(a, b): print(str(a) + &#39; &#39; + str(b)) if __name__ == &#39;__main__&#39;: app = Flask(__name__) app.]]></description>
</item>
<item>
  <title>APScheduler 笔记</title>
  <link>https://hellofinger.tech/2019/03/apscheduler-usage/</link>
  <pubDate>Sat, 23 Mar 2019 14:13:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2019/03/apscheduler-usage/</guid>
  <description><![CDATA[简介APScheduler是类似Quartz的一个Python定时任务框架，实现了Quartz的所有功能，使用起来十分方便。提供了基于日期、固定时间间隔以及crontab类型的任务，并且可以持久化任务。如果将任务持久化到数据库中，那么它们也将在调度程序在重新启动后继续运行并保持其状态。重启启动调度程序后，它将运行它在脱机时运行的所有任务。
除此之外，APScheduler还可以用作特定于平台的调度程序（如cron守护程序或Windows任务调度程序）的跨平台，特定于应用程序的替代程序。但请注意，APScheduler本身不是守护程序或服务，也不附带任何命令行工具。它主要用于在现有应用程序中运行。也就是说，APScheduler确实为我们提供了一些构建块来构建调度程序服务或运行专用的调度程序进程。
官方地址：https://github.com/agronholm/apscheduler
使用简单例子1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #!usr/bin/env python3 # -*- coding:utf-8 _*- from datetime import datetime import time import os from apscheduler.schedulers.background import BackgroundScheduler def tick(): print(&#39;Tick! The time is: %s&#39; % datetime.now()) if __name__ == &#39;__main__&#39;: # 1、创建后台执行的 schedulers scheduler = BackgroundScheduler() # 2、添加调度任务，触发器选择 interval(间隔)，每隔3秒执行一次 scheduler.]]></description>
</item>
</channel>
</rss>
