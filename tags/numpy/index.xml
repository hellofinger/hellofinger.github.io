<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Numpy - 标签 - Finger&#39;s Blog</title>
    <link>http://localhost:1313/tags/numpy/</link>
    <description>Numpy - 标签 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Thu, 23 Aug 2018 22:19:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/numpy/" rel="self" type="application/rss+xml" /><item>
  <title>Numpy基础</title>
  <link>http://localhost:1313/2018/08/numpy-basis/</link>
  <pubDate>Thu, 23 Aug 2018 22:19:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2018/08/numpy-basis/</guid>
  <description><![CDATA[原文地址：https://www.jiqizhixin.com/articles/2018-07-18-2
介绍numpy是专门为科学计算设计的一个python扩展包，为python提供高效率的多维数组，也被称为面向阵列计算（array oriented computing），同时numpy也是github上的一个开源项目：numpy，numpy是基于c语言开发，所以这使得numpy的运行速度很快，高效率运行就是numpy的一大优势。
用numpy生成一维数组
1 2 3 4 &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; a = np.array([[1,2,3]], dtype=np.int32) &gt;&gt;&gt; a array([[1, 2, 3]]) numpy中定义的最重要的数据结构是称为ndarray的n维数组类型，这个结构引用了两个对象，一块用于保存数据的存储区域和一个用于描述元素类型的dtype对象：
性能二维数组的生成在python中我们还可以用到list列表，如果用list来表示[1,2,3]，由于list中的元素可以是任何对象，所以list中保存的是对象的指针，如果要保存[1,2,3]就需要三个指针和三个整数对象，是比较浪费内存资源和cpu计算时间的，而ndarray是一种保存单一数据类型的多维数组结构，在数据处理上比list列表要快上很多。
使用生成一个3x3的矩阵1 2 3 4 5 6 7 8 9 10 11 12 13 &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; data = np.array([[1,2,3],[4,5,6],[7,8,9]]) &gt;&gt;&gt; data array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # 等价于data=np.arange(1，10).reshape(3,3) &gt;&gt;&gt; data = np.arange(1,10).reshape(3,3) &gt;&gt;&gt; data array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) 查看矩阵信息1 2 3 4 5 6 7 8 9 10 11 # 返回元组，表示n行n列 &gt;&gt;&gt; data.]]></description>
</item>
<item>
  <title>用Numpy求矩阵的逆</title>
  <link>http://localhost:1313/2018/06/inverse-matrix-with-numpy/</link>
  <pubDate>Sun, 24 Jun 2018 19:02:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2018/06/inverse-matrix-with-numpy/</guid>
  <description><![CDATA[定义一个n阶方阵A称为可逆的，或非奇异的，如果存在一个n阶方阵B，使得
AB = BA = E
并称B是A的一个逆矩阵。A的逆矩阵记作A^-1。
百度逆矩阵
特性若|A|≠0，则矩阵A可逆，且
其中，A*为矩阵A的伴随矩阵。
求解假定矩阵A为:
根据公式:
因A可逆，则有A的伴随矩阵特性 A* = A^T
根据三阶行列式特性（对角线法）|A| = (1 x 1) - (-1 x 1)
代入公式：
用Numpy求矩阵的逆numpy.linalg中的inv()函数就是用来求矩阵的逆。
1 2 3 4 5 6 7 8 &gt;&gt;&gt; A = np.mat(&#34;1 -1; 1 1&#34;) &gt;&gt;&gt; A matrix([[ 1, -1], [ 1, 1]]) &gt;&gt;&gt; inverse = np.linalg.inv(A) &gt;&gt;&gt; inverse matrix([[ 0.5, 0.5], [-0.5, 0.5]]) 感觉是不是很简单。]]></description>
</item>
<item>
  <title>用Numpy解线性方程组</title>
  <link>http://localhost:1313/2018/06/solution-of-linear-equations-with-numpy/</link>
  <pubDate>Sun, 24 Jun 2018 10:02:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2018/06/solution-of-linear-equations-with-numpy/</guid>
  <description><![CDATA[矩阵可以通过线性方式把一个向量变换成另一个向量，因此从数值计算的角度看， 这种操作对应于一个线性方程组。Numpy.linalg中的 solve() 子例程可以求解类似 Ax=b 这种形式的线性方程组，其中A是一个矩阵，b是一维或者二维数组，二x是未知量。下面介绍如何使用 dot() 函数来计算两个浮点型数组的点积(dot product)。
这里举例说明解线性方程组的过程，具体步骤如下所示：
1、创建矩阵A和数组b1 2 3 4 5 6 7 8 9 &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; A = np.mat(&#34;1 -2 1; 0 2 -8; -4 5 9&#34;) # mat函数可以将目标数据的类型转换为矩阵（matrix） &gt;&gt;&gt; A matrix([[ 1, -2, 1], [ 0, 2, -8], [-4, 5, 9]]) &gt;&gt;&gt; b = np.array([0, 8, -9]) &gt;&gt;&gt; b array([ 0, 8, -9]) 2、调用solve()函数1 2 3 &gt;&gt;&gt; x = np.]]></description>
</item>
<item>
  <title>深度学习矩阵运算的概念和代码实现(Numpy)</title>
  <link>http://localhost:1313/2018/06/matrix-with-numpy/</link>
  <pubDate>Sun, 10 Jun 2018 09:51:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2018/06/matrix-with-numpy/</guid>
  <description><![CDATA[本文从向量的概念与运算扩展到矩阵运算的概念与代码实现，对机器学习或者是深度学习的入门者提供最基础，也是最实用的教程指导，为以后的机器学习模型开发打下基础。
在我们学习机器学习时，常常遇到需要使用矩阵提高计算效率的时候。如在使用批量梯度下降迭代求最优解时，正规方程会采用更简洁的矩阵形式提供权重的解析解法。而如果不了解矩阵的运算法则及意义，甚至我们都很难去理解一些如矩阵因子分解法和反向传播算法之类的基本概念。同时由于特征和权重都以向量储存，那如果我们不了解矩阵运算，代码实现将变得十分艰难。
1、什么是线性代数？在深度学习中，线性代数是一个强大的数学工具箱，它提供同时计算多维数组的方法。线性代数不仅会提供如同向量和矩阵那样的结构来储存这些数字，还会提供矩阵的加，减，乘，除和其他运算规则。
2、线性代数为什么如此实用？线性代数将复杂问题转变为简单，直观和高效的计算问题。下面的例子可以表明实现同样的功能，线性代数的代码表达是如何的简洁与美观。
1 2 3 4 5 6 7 8 9 # Multiply two arrays &gt;&gt;&gt; x = [1, 2, 3] &gt;&gt;&gt; y = [2, 3, 4] &gt;&gt;&gt; product = [] &gt;&gt;&gt; for i in range(len(x)): ... product.append(x[i] * y[i]) ... &gt;&gt;&gt; product [2, 6, 12] 1 2 3 4 5 6 # Linear algebra version &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; x = np.array([1,2,3]) &gt;&gt;&gt; y = np.]]></description>
</item>
</channel>
</rss>
