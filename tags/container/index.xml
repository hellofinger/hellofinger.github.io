<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Container - 标签 - Finger&#39;s Blog</title>
    <link>https://hellofinger.tech/tags/container/</link>
    <description>Container - 标签 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Wed, 12 Oct 2022 20:14:52 &#43;0000</lastBuildDate><atom:link href="https://hellofinger.tech/tags/container/" rel="self" type="application/rss+xml" /><item>
  <title>容器实现原理</title>
  <link>https://hellofinger.tech/2022/10/container-principle/</link>
  <pubDate>Wed, 12 Oct 2022 20:14:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2022/10/container-principle/</guid>
  <description><![CDATA[容器实现原理容器到底是什么一回事？它有什么样的特性？又是如何运行起来的呢？下面我们简单介绍一下以Docker容器为主的Linux容器的实现原理。
容器其实是一种沙盒技术。沙盒就是能够像集装箱一样把你的应用“装”起来。这样，应用与应用之间就有了边界而不至于互相干扰；同时也可以很方便地搬来搬去。
而容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造一个“边界”。
对于Docker等大多数Linux容器来说，Cgroups 技术是用来创造约束的主要手段，而 Namespace 技术则是用来修改进程视图的主要方法。
创造约束，换一种说话就是限制资源的使用量，设置资源的配额上限。
修改进程视图，换一种说话就是把进程隔离起来，让其他进程看不见。
隔离技术（Namepsace）容器对资源的隔离主要是通过Namespace技术实现。Namespace是Linux Kernel提供的一种资源隔离方案，不同的Namespace下的资源是独立的，系统可以为容器进程分配不同的Namespace，从而保证各个进程之间对彼此是透明。
听起来比较抽象，我们以进程资源举个例子，看Namespace是如何实现容器进程间PID的隔离。
我们用Docker启动一个busybox容器并进入，运行ps指令：
1 2 3 4 5 6 ~$ docker run -it busybox /bin/sh / # ps -ef PID USER TIME COMMAND 1 root 0:00 /bin/sh 6 root 0:00 ps -ef 我们再启动一个ubuntu容器并进入，运行ps指令：
1 2 3 4 5 6 ~$ docker run -it ubuntu /bin/sh # ps -ef PID PPID C STIME TTY TIME CMD 1 0 0 10:19 pts/0 00:00:00 /bin/sh 6 1 0 10:19 pts/0 00:00:00 ps -ef 我们在宿主机上运行ps指令：]]></description>
</item>
</channel>
</rss>
