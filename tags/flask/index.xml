<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Flask - 标签 - Finger&#39;s Blog</title>
    <link>https://hellofinger.tech/tags/flask/</link>
    <description>Flask - 标签 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Sat, 23 Mar 2019 23:14:00 &#43;0000</lastBuildDate><atom:link href="https://hellofinger.tech/tags/flask/" rel="self" type="application/rss+xml" /><item>
  <title>Flask-APScheduler 笔记</title>
  <link>https://hellofinger.tech/2019/03/flask-apscheduler-usage/</link>
  <pubDate>Sat, 23 Mar 2019 23:14:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2019/03/flask-apscheduler-usage/</guid>
  <description><![CDATA[简介Flask-APScheduler是Flask扩展，增加了对APScheduler的支持。
支持从Flask配置加载调度程序配置以及任务定义。 支持WEB程序和调度程序共存。提供REST API管理任务调度。并为REST API提供身份验证。目前只支持Basic-Auth认证。 官方地址：https://github.com/viniciuschiele/flask-apscheduler
使用1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from flask import Flask from flask_apscheduler import APScheduler class Config(object): JOBS = [ { &#39;id&#39;: &#39;job1&#39;, &#39;func&#39;: &#39;jobs:job1&#39;, &#39;args&#39;: (1, 2), &#39;trigger&#39;: &#39;interval&#39;, &#39;seconds&#39;: 10 } ] SCHEDULER_API_ENABLED = True def job1(a, b): print(str(a) + &#39; &#39; + str(b)) if __name__ == &#39;__main__&#39;: app = Flask(__name__) app.]]></description>
</item>
<item>
  <title>Docker 构建第一个App</title>
  <link>https://hellofinger.tech/2017/06/docker-build-and-run-your-first-app/</link>
  <pubDate>Thu, 22 Jun 2017 23:45:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2017/06/docker-build-and-run-your-first-app/</guid>
  <description><![CDATA[测试环境：阿里云 ubuntu14.04
一、新建Dockerfile文件1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Use an official Python runtime as a base image FROM python:2.7-slim # Set the working directory to /app WORKDIR /app # Copy the current directory contents into the container at /app ADD . /app # Install any needed packages specified in requirements.txt RUN pip install -r requirements.]]></description>
</item>
</channel>
</rss>
