<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Numpy - 分类 - Finger&#39;s Blog</title>
    <link>http://localhost:1313/categories/numpy/</link>
    <description>Numpy - 分类 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Sun, 24 Jun 2018 19:02:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/categories/numpy/" rel="self" type="application/rss+xml" /><item>
  <title>用Numpy求矩阵的逆</title>
  <link>http://localhost:1313/2018/06/inverse-matrix-with-numpy/</link>
  <pubDate>Sun, 24 Jun 2018 19:02:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2018/06/inverse-matrix-with-numpy/</guid>
  <description><![CDATA[定义一个n阶方阵A称为可逆的，或非奇异的，如果存在一个n阶方阵B，使得
AB = BA = E
并称B是A的一个逆矩阵。A的逆矩阵记作A^-1。
百度逆矩阵
特性若|A|≠0，则矩阵A可逆，且
其中，A*为矩阵A的伴随矩阵。
求解假定矩阵A为:
根据公式:
因A可逆，则有A的伴随矩阵特性 A* = A^T
根据三阶行列式特性（对角线法）|A| = (1 x 1) - (-1 x 1)
代入公式：
用Numpy求矩阵的逆numpy.linalg中的inv()函数就是用来求矩阵的逆。
1 2 3 4 5 6 7 8 &gt;&gt;&gt; A = np.mat(&#34;1 -1; 1 1&#34;) &gt;&gt;&gt; A matrix([[ 1, -1], [ 1, 1]]) &gt;&gt;&gt; inverse = np.linalg.inv(A) &gt;&gt;&gt; inverse matrix([[ 0.5, 0.5], [-0.5, 0.5]]) 感觉是不是很简单。]]></description>
</item>
<item>
  <title>用Numpy解线性方程组</title>
  <link>http://localhost:1313/2018/06/solution-of-linear-equations-with-numpy/</link>
  <pubDate>Sun, 24 Jun 2018 10:02:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2018/06/solution-of-linear-equations-with-numpy/</guid>
  <description><![CDATA[矩阵可以通过线性方式把一个向量变换成另一个向量，因此从数值计算的角度看， 这种操作对应于一个线性方程组。Numpy.linalg中的 solve() 子例程可以求解类似 Ax=b 这种形式的线性方程组，其中A是一个矩阵，b是一维或者二维数组，二x是未知量。下面介绍如何使用 dot() 函数来计算两个浮点型数组的点积(dot product)。
这里举例说明解线性方程组的过程，具体步骤如下所示：
1、创建矩阵A和数组b1 2 3 4 5 6 7 8 9 &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; A = np.mat(&#34;1 -2 1; 0 2 -8; -4 5 9&#34;) # mat函数可以将目标数据的类型转换为矩阵（matrix） &gt;&gt;&gt; A matrix([[ 1, -2, 1], [ 0, 2, -8], [-4, 5, 9]]) &gt;&gt;&gt; b = np.array([0, 8, -9]) &gt;&gt;&gt; b array([ 0, 8, -9]) 2、调用solve()函数1 2 3 &gt;&gt;&gt; x = np.]]></description>
</item>
</channel>
</rss>
