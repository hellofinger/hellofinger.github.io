<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>CICD - 分类 - Finger&#39;s Blog</title>
    <link>http://localhost:1313/categories/cicd/</link>
    <description>CICD - 分类 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Thu, 20 Feb 2020 18:11:52 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/categories/cicd/" rel="self" type="application/rss+xml" /><item>
  <title>GitLab最佳实践--CI/CD之Pipeline(四)</title>
  <link>http://localhost:1313/2020/02/gitlab-cicd-pipeline-4/</link>
  <pubDate>Thu, 20 Feb 2020 18:11:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2020/02/gitlab-cicd-pipeline-4/</guid>
  <description><![CDATA[Only / Exceptonly 和 except用于定义Pipeline Job应该什么时候执行或者不执行。
only 定义需要执行的分支或标签 except 定义不执行的分支或标签 以下为用法规则：
only和except如果都存在在一个Pipepline Job声明中，则所需引用(ref)将会被only和except所定义的分支过滤. only和except允许使用正则表达式 only和except允许使用指定仓库地址，但是不forks仓库 only和except 允许使用的特殊关键字：
值 描述 branches 当目标分支执行push操作时 tags 当目标分支打tag标记时 api 当一个pipeline被另一个pipeline api所触发时 external 当使用了GitLab以外的外部CI服务，如Jenkins pipelines 针对多项目触发器而言，当使用CI_JOB_TOKEN并使用gitlab所提供的api创建多个pipelines的时候 pushes 当pipeline被用户的git push操作所触发的时候 schedules 针对预定好的pipline而言 triggers 用token创建pipline的时候 web 在GitLab页面上pipeline标签页下，点击Run Pileline按钮时 merge_requests 当用户发起合并请求时 chat 对于使用GitLab ChatOps命令时 接下来看一个简单的例子，定义一个仅在feature分支才触发job，而其他分支都不执行。
1 2 3 4 5 job: script: - echo &#39;Hello, Only / Except&#39; only: - feature 添加test.txt文件后，可以看到job开始执行。
再来看一个使用正则表达式的例子。
1 2 3 4 5 job: script: - echo &#39;Test regular expression&#39; only: - /^issue-.]]></description>
</item>
<item>
  <title>GitLab最佳实践--CI/CD之Pipeline(三)</title>
  <link>http://localhost:1313/2020/02/gitlab-cicd-pipeline-3/</link>
  <pubDate>Tue, 18 Feb 2020 18:11:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2020/02/gitlab-cicd-pipeline-3/</guid>
  <description><![CDATA[RulesRules是用于定义Pipeline Job的触发规则。可用的属性有：
if changes exists 1 2 3 4 5 6 7 job: script: - echo &#39;Hello, Rules&#39; rules: - if: &#39;$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == &#34;dev&#34;&#39; when: always - when: manual 在上述例子中，如果匹配 if 条件内容，则按照 when:always规则执行。即当分支为dev时，只要commit就会触发该任务。否则，按照when:manual规则执行，任务变成手动触发。
a、满足第一个条件，在dev分支，执行commit。pipeline任务正常执行。
b、不满足第一个条件，在master分支，执行commit。pipeline任务变成手动模式。
rules:if语法类似于编程语言的if，else条件语句。 多个if语句为：
1 2 3 4 5 6 7 rules: - if: Condition 1 when: always - if: Condition 2 when: manual ... - when: on_success 也可以使用逻辑运算符：逻辑与(&amp;&amp;) 和 逻辑或(||) 例如：
1 2 3 4 5 6 7 8 job: script: &#34;echo Hello, Rules!]]></description>
</item>
<item>
  <title>GitLab最佳实践--CI/CD之Pipeline(二)</title>
  <link>http://localhost:1313/2020/02/gitlab-cicd-pipeline-2/</link>
  <pubDate>Mon, 17 Feb 2020 18:11:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2020/02/gitlab-cicd-pipeline-2/</guid>
  <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 stages: - build - cleanup_build - test - deploy - cleanup build_job: stage: build script: - echo &#34;build job&#34; cleanup_build_job: stage: cleanup_build script: - echo &#34;cleanup build job&#34; when: on_failure test_job: stage: test script: - echo &#34;test job&#34; deploy_job: stage: deploy script: - echo &#34;deploy job&#34; when: manual cleanup_job: stage: cleanup script: - echo &#34;cleanup job&#34; when: always 以上为Pipeline Job属性when 的例子。]]></description>
</item>
<item>
  <title>GitLab最佳实践--CI/CD之Pipeline(一)</title>
  <link>http://localhost:1313/2020/02/gitlab-cicd-pipeline-1/</link>
  <pubDate>Sun, 16 Feb 2020 18:11:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2020/02/gitlab-cicd-pipeline-1/</guid>
  <description><![CDATA[从CI / CD &ndash; HelloWorld的例子中我们知道 .gitlab-ci.yml文件定义了Pipeline的结构和顺序。GitLab Runner根据Pipeline的结构和顺序执行任务。接下来我们看下面一个例子。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 stages: - build - test - deploy build: stage: build script: - echo &#34;build job&#34; tags: - docker test1: stage: test script: - echo &#34;test1 job&#34; tags: - docker test2: stage: test script: - echo &#34;test2 job&#34; tags: - docker deply: stage: deploy script: - echo &#34;deploy job&#34; tags: - docker stages（阶段）保留关键字，定义了Pipeline的全部阶段。同一阶段内的任务并行执行。全部执行成功后开始下一阶段任务。任何阶段内任意任务执行失败都会导致Pipeline失败。所有阶段内的任务都执行成功后Pipeline才会显示passed。否则显示failed。如果未定义stages，则默认有build、test、deploy三个阶段，如果未定义stage，则默认test阶段。]]></description>
</item>
<item>
  <title>GitLab最佳实践--CI/CD之Hello World</title>
  <link>http://localhost:1313/2020/02/gitlab-install-and-maintance/</link>
  <pubDate>Sat, 15 Feb 2020 18:11:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2020/02/gitlab-install-and-maintance/</guid>
  <description><![CDATA[CI / CD 方法论简介软件开发的连续方法基于自动化脚本，以最大程度地减少在开发应用程序时引入错误的机会。从开发新代码到部署新代码，甚至根本不需要干预。
它涉及到在每次小的迭代中就不断地构建，测试和部署代码更改，从而减少了基于错误或失败的先前版本开发新代码的机会。
此方法主要有三种，我们可以根据自己项目的实际情况进行应用。
持续集成考虑一个应用程序，其代码存储在GitLab的Git存储库中。开发人员每天都要多次推送代码更改。对于每次向存储库的推送，您都可以创建一组脚本来自动构建和测试您的应用程序，从而减少了向应用程序引入错误的机会。
这种做法被称为持续集成；对于提交给应用程序（甚至是开发分支）的每个更改，它都会自动连续地构建和测试，以确保所引入的更改通过您为应用程序建立的所有测试，准则和代码合规性标准。
GitLab本身就是使用持续集成作为软件开发方法的一个示例。对于项目的每一次推送，都有一组检查代码的脚本。
持续交付持续交付是超越持续集成的一步。您的应用程序不仅会在推送到代码库的每次代码更改时都进行构建和测试，而且，作为附加步骤，即使部署是手动触发的，它也可以连续部署。
此方法可确保自动检查代码，但需要人工干预才能从策略上手动触发更改的部署。
持续部署类似于持续交付，持续部署也是超越持续集成的又一步。不同之处在于，您无需将其手动部署，而是将其设置为自动部署。部署您的应用程序完全不需要人工干预。
GitLab CI / CD简介GitLab CI/CD是GitLab内置功能，它提供了强大的项目管理和集成功能，并且提供了可视化界面。可以很方便的实现持续集成，交付与部署。并且无需第三方应用程序。
GitLab CI / CD 工作流简介Step1、我们需要把项目源代码托管到GitLab仓库。 Step2、在项目根目录新建 .gitlab-ci.yml。在此文件，编写我们需要运行的脚本内容(例如：依赖项，执行顺序，触发方式等)。 Step3、将该项目注册到可以运行的GitLab Runner。
GitLab会自动检测 .gitlab-ci.yml文件，并根据该文件的内容进行触发，并执行脚本内容。
第一个例子 &ndash; Hello World在GitLab官网( https://gitlab.com )注册一个账号。当然我们也可以使用自己搭建的GitLab(参考上一篇文章《GitLab最佳实践 &ndash; 安装与维护》)
Step1、新建一个项目gitlab-cicd-helloworld。
Step2、新建 .gitlab-ci.yml，增加以下内容：
1 2 3 4 5 demo_job_1: tags: - ci script: - echo &#34;Hello World&#34; Step3、安装和注册GitLab Runner。本例使用的是Windows系统。 传送门：https://docs.gitlab.com/runner/install/windows.html
进入项目Settings &ndash;&gt; CD / CD菜单，找到Runners配置信息。
执行命令：.\gitlab-runner.exe register。Runnner注册成功后，回到设置界面刷新后，将会看到绿色圆点标记的可用Runnners。]]></description>
</item>
</channel>
</rss>
