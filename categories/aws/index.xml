<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>AWS - 分类 - Finger&#39;s Blog</title>
    <link>http://localhost:1313/categories/aws/</link>
    <description>AWS - 分类 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Fri, 04 Nov 2022 11:12:52 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/categories/aws/" rel="self" type="application/rss+xml" /><item>
  <title>AWS实践--使用CodeArtifact创建私有的NPM package</title>
  <link>http://localhost:1313/2022/11/aws-code-artifact-best-practice/</link>
  <pubDate>Fri, 04 Nov 2022 11:12:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2022/11/aws-code-artifact-best-practice/</guid>
  <description><![CDATA[前提条件IAM具有CodeArtifact权限 安装了Node和NPM 1. 创建CodeArtifact的domain和repository2. 创建私有的npm package1 2 # 初始化一个npm package npm init --scode=@finger -y 1 2 3 4 5 6 7 8 9 10 11 12 13 # package.json { &#34;name&#34;: &#34;finger-package&#34;, &#34;version&#34;: &#34;1.0.0&#34;, &#34;description&#34;: &#34;&#34;, &#34;main&#34;: &#34;index.js&#34;, &#34;scripts&#34;: { &#34;test&#34;: &#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34; }, &#34;keywords&#34;: [], &#34;author&#34;: &#34;&#34;, &#34;license&#34;: &#34;ISC&#34; } 新建index.js文件。添加helloworld函数
1 2 3 4 # index.js module.exports.helloWorld = function() { console.]]></description>
</item>
<item>
  <title>AWS实践--VPC对等连接(Peerning connections)</title>
  <link>http://localhost:1313/2022/09/aws-vpc-peering/</link>
  <pubDate>Fri, 02 Sep 2022 21:12:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2022/09/aws-vpc-peering/</guid>
  <description><![CDATA[什么是VPC对等连接VPC对等连接是一项联网功能，支持AWS中两个VPC之间进行安全、直接的通信。这种私有连接使资源能够在对等VPC网络中相互交互，如同资源属于同一个网络一样，而无需遍历公网访问。
VPC对等连接，可以连接相同或不同AWS区域中的两个VPC。在连接的VPC之间发送的流量不会通过互联网、VPC连接或AWS Direct Connect传输。
对等连接主要限制两个 VPC 之间不能同时创建多个 VPC 对等连接 对等连接中 两个VPC 的 IPv4 CIDR 块不能重叠 VPC 对等连接是两个 VPC 之间的一对一关系, 多个 VPC 对等连接中不支持传递的对等关系 创建对等连接创建名称（可选）：VPC对等连接的名字。可以随时修改。 VPC ID(请求者)：需要用于创建VPC对等连接的源VPC Account(接受方)：目标AWS账号ID Region(接受方)：目标AWS区域 VPC ID(接受方)：用于创建VPC对等连接的目标VPC 接受创建完VPC对等连接后，状态会处于 pending-acceptance。必须等待接受者VPC的拥有者接受后才能激活。
更新路由表要在对等 VPC 中的实例之间启用私有 IPv4 流量，必须向与两个实例的子网关联的路由表添加路由。路由目的地为对等 VPC 的 CIDR 块，目标为 VPC 对等连接的 ID。
更新安全组允许流量流入和流出与对等的 VPC。需要在安全组的入站和出站规则中添加CIDR块。
将 172.29.0.0/16 网段加入到目标VPC的安全组中
测试对等网络ping 一下 172.29.x.x内外EC2的IP地址
1 ping 172.29.154.173 参考[1] https://docs.aws.amazon.com/vpc/latest/peering/working-with-vpc-peering.html ]]></description>
</item>
<item>
  <title>AWS实践--跨账号访问ECR</title>
  <link>http://localhost:1313/2022/09/aws-cross-account-access-ecr-repo/</link>
  <pubDate>Fri, 02 Sep 2022 11:12:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2022/09/aws-cross-account-access-ecr-repo/</guid>
  <description><![CDATA[需求现有一个基础账号(111111111111)ECR存放所有的基础镜像和应用镜像，其他子账号(222222222222、333333333333、444444444444)的EKS集群需要拉取基础账号的ECR镜像。
配置以下示例为AWS存储库跨账号访问策略.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { &#34;Version&#34;: &#34;2012-10-17&#34;, &#34;Statement&#34;: [ { &#34;Sid&#34;: &#34;&lt;statement-name&gt;&#34;, &#34;Effect&#34;: &#34;Allow&#34;, &#34;Principal&#34;: { &#34;AWS&#34;: [ &#34;arn:aws:iam::222222222222:root&#34;, &#34;arn:aws:iam::333333333333:root&#34;, &#34;arn:aws:iam::444444444444:root&#34; ] }, &#34;Action&#34;: [ &#34;ecr:BatchGetImage&#34;, &#34;ecr:GetDownloadUrlForLayer&#34; ] } ] } 测试1 2 3 4 5 6 7 8 # 登录 222222222222、333333333333、444444444444 子账号的服务器 # 执行ECR登录命令 aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 111111111111.]]></description>
</item>
<item>
  <title>AWS实战--配置ECR Replication</title>
  <link>http://localhost:1313/2022/01/aws-setting-ecr-replication/</link>
  <pubDate>Mon, 17 Jan 2022 10:51:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2022/01/aws-setting-ecr-replication/</guid>
  <description><![CDATA[Amazon ECR 可以配置跨区域(region)或跨账号(account)复制。配置复制后，推送(Push)到源存储库的镜像会自动复制到目标存储库(ECR)。
本例以跨区域复制为例：源ECR（ap-southeast-1）==&gt; 目标ECR （us-east-1）
配置源 ECR登录到 AWS ap-southeast-1 region的ECR页面。选择 Private registry &ndash;&gt; Replication菜单。点击 Edit 按钮. 进入到Replication configuration页面后，点击 Add rule。 选择复制的目标类型，我们选择允许跨区域复制(Cross-region)，点击Next。 选择目标region(us-east-1)。添加镜像名字过滤条件(本例为hello前缀的镜像仓库)。默认为前缀匹配。最后Submit rule。
配置完成后可以查看 JSON格式的内容
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { &#34;rules&#34;: [ { &#34;destinations&#34;: [ { &#34;region&#34;: &#34;us-east-1&#34;, &#34;registryId&#34;: &#34;&lt;your-aws-account-id&gt;&#34; } ], &#34;repositoryFilters&#34;: [ { &#34;filter&#34;: &#34;hello&#34;, &#34;filterType&#34;: &#34;PREFIX_MATCH&#34; } ] } ] } 配置目标ECR创建一个和源名字一样的私有镜像仓库(本例为hello-app)]]></description>
</item>
<item>
  <title>AWS实战--Lambda&#43;SNS&#43;S3实现自动生成统计图表工具</title>
  <link>http://localhost:1313/2020/02/aws-lambda-sns-s3-auto-gen-chart-tool/</link>
  <pubDate>Sun, 23 Feb 2020 22:37:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2020/02/aws-lambda-sns-s3-auto-gen-chart-tool/</guid>
  <description><![CDATA[需求概述通过一个种标准的数据结构。生成相应的数据统计图(线形图，柱状图，饼状图等)。
实现方案基于AWS服务，将S3的存储桶作为事件触发源，用户只要上传数据到该存储桶，就广播通知，订阅该通知的消息队列则触发到具体的Lambda函数。Lambda函数完成绘图逻辑，并生成统计图上传到S3的存储桶。
具体设计图如下： 具体流程Step1、创建一个S3存储桶，选择 Properties -&gt;Advanced settings -&gt; Events。
然后，Add notification。我们选择 Events为PUT。指定前缀和后缀。选择发送通知到SNS Topic。
Step2、在创建Events之前，我们需要先创建一个SNS Topic。并给S3存储桶授予访问权限。否则无法保存Events。
Step3、新建一个SQS，并给上一步创建的SNS增加权限。这样我们就可以在SNS上进行订阅。 Step4、新建Lambda。将其添加到SQS的Triggers。 到这里，我们的整个流程已经基本完成。由S3监听用户上传的数据文件，然后由SNS通知到SQS，SQS触发到Lambda。最后就是具体编码实现了。
编码实现定义数据结构：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { &#34;title&#34;: { &#34;name&#34;: &#34;&#34;, // 图例名称 &#34;loc&#34;: &#34;top, bottom, left, right&#34; // 显示位置 }, &#34;name&#34;: &#34;图表保存到S3的名称。&#34;, &#34;size&#34;: [6, 7], // 图表的大小 &#34;chart_kind&#34;: &#34;pie, line, bar.]]></description>
</item>
<item>
  <title>AWS Serverless - NodeJs实践</title>
  <link>http://localhost:1313/2018/09/aws-serverless-with-nodejs/</link>
  <pubDate>Sat, 15 Sep 2018 11:37:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2018/09/aws-serverless-with-nodejs/</guid>
  <description><![CDATA[一、Serverless简介Serverless是一种无服务的架构，如AWS Lambda。Serverless与传统架构不同，由开发者实现的服务端逻辑运行在无状态的计算容器中，它是由事件触发，短暂的(可能只存在于一次请求过程中)，完全被第三方管理。
以亚马逊的AWS Lambda为案例，Lambda能让不用思考任何服务器，也就是说，不用你处理服务器上的部署、服务器容量和服务器的扩展和失败容错，还有服务器上选择什么OS操作系统，语言的更新，日志等等问题。你的应用程序只需要和多个第三方的API或服务打交道，也可以自我创建一个无服务器的API。
二、Amazon API GatewayAmazon API Gateway 是一种完全托管的服务，可以帮助开发者轻松创建、发布、维护、监控和保护任意规模的 API。只需在 AWS 管理控制台中点击几下，您便可以创建可充当应用程序“前门”的 API，从后端服务访问数据、业务逻辑或功能，例如基于 Amazon Elastic Compute Cloud (Amazon EC2) 运行的工作负载、基于 AWS Lambda 运行的代码或任意 Web 应用。
Amazon API Gateway 负责管理所有任务，涉及接受和处理成千上万个并发 API 调用，包括流量管理、授权和访问控制、监控，以及 API 版本管理。Amazon API Gateway 没有最低费用和启动成本。您只需为收到的 API 调用以及传出的数据量付费。
三、使用NodeJs创建Serverless APIaws-serverless-express —— 基于Express的Serverless中间件https://github.com/fingerchou/aws-serverless-express
Run serverless applications and REST APIs using your existing Node.js application framework, on top of AWS Lambda and Amazon API Gateway. The sample provided allows you to easily build serverless web applications/services and RESTful APIs using the Express framework.]]></description>
</item>
</channel>
</rss>
