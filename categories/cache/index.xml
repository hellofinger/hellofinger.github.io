<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Cache - 分类 - Finger&#39;s Blog</title>
    <link>http://localhost:1313/categories/cache/</link>
    <description>Cache - 分类 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Sat, 13 Jul 2019 18:23:00 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/categories/cache/" rel="self" type="application/rss+xml" /><item>
  <title>关于缓存</title>
  <link>http://localhost:1313/2019/07/about-the-cache/</link>
  <pubDate>Sat, 13 Jul 2019 18:23:00 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>http://localhost:1313/2019/07/about-the-cache/</guid>
  <description><![CDATA[缓存模式（Cache Aside Pattern）什么是&quot;Cache Aside Pattern&quot;?答： 旁路缓存方案的经验实践，这个实践又分读实践，写实践。
对于读请求先读cache，再读db 如果，cache hit，则直接返回数据 如果，cache miss，则访问db，并将数据set回缓存 如上图：
先从cache中尝试get数据，结果miss了 再从db中读取数据，从库，读写分离 最后把数据set回cache，方便下次读命中 对于写请求淘汰缓存，而不是更新缓存 先操作数据库，再淘汰缓存 如上图：
第一步要操作数据库，第二步操作缓存 缓存，采用delete淘汰，而不是set更新 Cache Aside Pattern为什么建议淘汰缓存，而不是更新缓存？答： 如果更新缓存，在并发写时，可能出现数据不一致。
如上图所示，如果采用set缓存。
在1和2两个并发写发生时，由于无法保证时序，此时不管先操作缓存还是先操作数据库，都可能出现：
请求1先操作数据库，请求2后操作数据库 请求2先set了缓存，请求1后set了缓存 导致，数据库与缓存之间的数据不一致。
所以，Cache Aside Pattern建议，delete缓存，而不是set缓存。
Cache Aside Pattern为什么建议先操作数据库，再操作缓存？答： 如果先操作缓存，在读写并发时，可能出现数据不一致。
如上图所示，如果先操作缓存。
在1和2并发读写发生时，由于无法保证时序，可能出现：
写请求淘汰了缓存 写请求操作了数据库（主从同步没有完成） 读请求读了缓存（cache miss） 读请求读了从库（读了一个旧数据） 读请求set回缓存（set了一个旧数据） 数据库主从同步完成 导致，数据库与缓存的数据不一致。 所以，Cache Aside Pattern建议，先操作数据库，再操作缓存。
Cache Aside Pattern方案存在什么问题？答： 如果先操作数据库，再淘汰缓存，在原子性被破坏时：
修改数据库成功了 淘汰缓存失败了 导致，数据库与缓存的数据不一致。
原文来自58沈剑: https://cloud.tencent.com/info/5e258c6f840423de68eda937db3e1c90.html
缓存问题用一张脑图总结如下：]]></description>
</item>
</channel>
</rss>
