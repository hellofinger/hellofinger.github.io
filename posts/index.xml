<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - Finger&#39;s Blog</title>
    <link>https://hellofinger.tech/posts/</link>
    <description>所有文章 | Finger&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>finger.zhou@gmail.com (Finger)</managingEditor>
      <webMaster>finger.zhou@gmail.com (Finger)</webMaster><lastBuildDate>Fri, 26 Feb 2021 17:27:52 &#43;0000</lastBuildDate><atom:link href="https://hellofinger.tech/posts/" rel="self" type="application/rss+xml" /><item>
  <title>Go基础--管道Channel</title>
  <link>https://hellofinger.tech/2021/02/go-basic-channel/</link>
  <pubDate>Fri, 26 Feb 2021 17:27:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2021/02/go-basic-channel/</guid>
  <description><![CDATA[ChannelChannel 是Goroutine之间的一种通信机制。这种通信机制有个专业名词叫CSP （ Communicating Sequential Process）即通信顺序进程，是一种并发编程模型。Goroutine 和 Channel 分别对应 CSP 中的实体和传递信息的媒介，Goroutine 之间会通过 Channel 传递数据。
设计原理在很多主流的编程语言中，多个线程传递数据的方式一般都是共享内存，为了解决线程之间的资源竞争，我们需要限制同一时间能够获取资源的线程数量。
在Go语言中则设计成：不通过共享内存的方式进行通信，而是通过通信的方式共享内存。
上图中的两个 Goroutine，一个会向 Channel 中发送数据，另一个会从 Channel 中接收数据，它们两者能够独立运行并不存在直接关联，但是能通过 Channel 间接完成通信。
声明1 2 3 4 ch := make(chan int) # 设置缓冲大小 ch := make(chan int, 100) 类型它包括三种类型的定义。可选的&lt;-代表channel的方向。如果没有指定方向，那么Channel就是双向的，既可以接收数据，也可以发送数据。
1 2 3 4 5 ChannelType = ( &#34;chan&#34; | &#34;chan&#34; &#34;&lt;-&#34; | &#34;&lt;-&#34; &#34;chan&#34; ) chan T // 可以接收和发送类型为 T 的数据 chan&lt;- float64 // 只可以用来发送 float64 类型的数据 &lt;-chan int // 只可以用来接收 int 类型的数据 基本操作channel 存在3种状态：]]></description>
</item>
<item>
  <title>Go基础--Context</title>
  <link>https://hellofinger.tech/2021/02/go-basic-context/</link>
  <pubDate>Fri, 26 Feb 2021 14:07:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2021/02/go-basic-context/</guid>
  <description><![CDATA[什么是 ContextContext 是 Go 并发编程中的一种编程模式。 主要指的是 goroutine的上下文，包含 goroutine 的运行状态，环境，现场等信息。 Context 主要用来在goroutine 之间传递上下文信息，包含：取消信号，超时时间，截止时间，k-v等。
为什么需要 Context在并发程序中，由于超时，取消操作或者一些异常情况，往往需要进行抢占操作或者中断后续的操作。例如：主协程中有多个任务1,2，&hellip;m，主协程对这些任务有超时控制；而其中任务1又有多个子任务1,2，&hellip;n。任务1对这些子任务也有自己的超时控制，那么这些子任务既要感知主协程的取消信号，也需要感知任务1的取消信号。 因此我们需要解决以下问题： 1、上层任务取消后，所有的下层任务都会被取消 2、中间某一层的任务取消后，只会将当前任务的下层任务取消，而不会影响上层的任务以及同级任务。
Context 的定义1 2 3 4 5 6 7 8 9 10 11 12 13 type Context interface { // 当 context 被取消或者到了 deadline，返回一个被关闭的 channel Done() &lt;-chan struct{} // 在 channel Done 关闭后，返回 context 取消原因 Err() error // 返回 context 是否会被取消以及自动取消时间（即 deadline） Deadline() (deadline time.Time, ok bool) // 获取 key 对应的 value Value(key interface{}) interface{} } Context 是一个接口，定义了4个方法，它们都是幂等的。也就是说连续多次调用同一个方法，得到的结果都是相同的。]]></description>
</item>
<item>
  <title>Go Package--gokit介绍</title>
  <link>https://hellofinger.tech/2020/08/go-package-gokit/</link>
  <pubDate>Thu, 20 Aug 2020 15:57:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/08/go-package-gokit/</guid>
  <description><![CDATA[Go-kit介绍Go kit 是用于在 Go 中构建微服务的编程工具包。用来解决了分布式系统和应用程序体系结构中的常见问题，让使用者可以专注于交付业务价值。
本身不是一个框架，而是一套微服务工具集，是框架的底层，用它的话来说，如果你希望构建一个框架，而Go-kit 就希望成为你的框架的一部分 可以用Go-kit 做适应自己平台的框架 它自身称为toolkit，并不是framework 它主要是为了满足5大原则，单一职责原则，开放原则，封闭原则，依赖倒置原则，接口隔离原则 三层模型Go-kit最核心是提供了三层模型来解耦业务，这是我们用它的主要目的，模型由上到下分别是 transport -&gt; endpoint -&gt; service
Transport 可以理解为是个拦截器，负责请求协议的实现和路由转发，请求和响应的序列化和反序列化
Endpoint 负责功能逻辑转发，这一层会调用Service具体方法
Service 服务功能具体实现，这样便于测试，只要 mock 传入的依赖参数即可
参考https://zhuanlan.zhihu.com/p/100226931?utm_source=wechat_session http://gokit.io/examples/stringsvc.html https://github.com/go-kit/kit ]]></description>
</item>
<item>
  <title>Go基础--三个点</title>
  <link>https://hellofinger.tech/2020/07/go-basic-three-dot/</link>
  <pubDate>Wed, 22 Jul 2020 10:14:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/07/go-basic-three-dot/</guid>
  <description><![CDATA[三个点可变长的函数参数1 2 3 4 5 6 7 func Sum(nums ...int) int { cnt := 0 for _, n := range nums { cnt += n } return cnt } 调用可变长参数列表的函数1 2 3 primes := []int{2, 3, 5, 7} Sum(primes...) 两个切片合并1 2 3 4 5 6 7 8 9 10 11 12 13 14 var str_1 = []string{ &#34;a&#34;, &#34;b&#34;, &#34;c&#34;, } var str_2 = []string{ &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, } str_1 = append(str_1, str_2.]]></description>
</item>
<item>
  <title>Go基础--Make和New</title>
  <link>https://hellofinger.tech/2020/07/go-basic-make-and-new/</link>
  <pubDate>Mon, 20 Jul 2020 09:44:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/07/go-basic-make-and-new/</guid>
  <description><![CDATA[make 和 newmake和new都是用于初始化，但是二者有很大差异：
-make 的作用是初始化内置的数据结构，例如切片，哈希和Channel -new 的作用是根据传入的类型分配内存，并返回指向该内存的指针
重点：make只用于map, slice, channel的内存分配，返回有初始值的类型本身，new用于所有类型的分配，new返回指针
make1 2 3 slice := make([]int, 0, 100) hash := make(map[int]bool, 10) ch := make(chan int, 5) new1 2 3 4 5 6 i := new(int) # 等于 var v int i := &amp;v new 和 make 内存分配图：]]></description>
</item>
<item>
  <title>Neo4j 基础知识</title>
  <link>https://hellofinger.tech/2020/06/neo4j-basic/</link>
  <pubDate>Tue, 16 Jun 2020 15:02:52 &#43;0800</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/06/neo4j-basic/</guid>
  <description><![CDATA[<h2 id="简介" class="heading-element"><span>简介</span>
  <a href="#%e7%ae%80%e4%bb%8b" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p>图形数据库： 存储 查询/遍历 多个连接数据</p>
<p>Neo4j是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎，但是它将结构化数据存储在网络(从数学角度叫做图)上而不是表中。Neo4j也可以被看作是一个高性能的图引擎，该引擎具有成熟数据库的所有特性。</p>
<p>节点/关系 用自增id来唯一标识， 容量35亿； 关系应该是方向性的。</p>
<table>
<thead>
<tr>
<th>关系数据库</th>
<th>图形数据库</th>
</tr>
</thead>
<tbody>
<tr>
<td>表</td>
<td>图</td>
</tr>
<tr>
<td>行</td>
<td>节点</td>
</tr>
<tr>
<td>列和数据</td>
<td>属性和值(KV)</td>
</tr>
<tr>
<td>Join</td>
<td>边</td>
</tr>
</tbody>
</table>
<h2 id="下载" class="heading-element"><span>下载</span>
  <a href="#%e4%b8%8b%e8%bd%bd" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p><a href="https://neo4j.com/download-center/#community"target="_blank" rel="external nofollow noopener noreferrer">https://neo4j.com/download-center/#community</a></p>
<h3 id="python-驱动" class="heading-element"><span>Python 驱动</span>
  <a href="#python-%e9%a9%b1%e5%8a%a8" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p><a href="https://github.com/neo4j/neo4j-python-driver"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/neo4j/neo4j-python-driver</a></p>
<h2 id="cypher-query-language-cql" class="heading-element"><span>Cypher Query Language (CQL)</span>
  <a href="#cypher-query-language-cql" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><p><a href="https://neo4j.com/developer/cypher-query-language/"target="_blank" rel="external nofollow noopener noreferrer">https://neo4j.com/developer/cypher-query-language/</a></p>
<h3 id="创建节点" class="heading-element"><span>创建节点</span>
  <a href="#%e5%88%9b%e5%bb%ba%e8%8a%82%e7%82%b9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>语法：CREATE (节点名: 标签 {节点属性})</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 一个标签的节点
</span></span><span class="line"><span class="cl">CREATE (node:label)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 多个标签的节点
</span></span><span class="line"><span class="cl">CREATE (node:label_1:label_2:label_3...label_N)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 创建节点属性
</span></span><span class="line"><span class="cl">CREATE (node:label { property_1: value_1, property_2: value_2...})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CREATE (p:Person {name: &#34;Finger&#34;, city: &#34;HengYang&#34;}) RETURN p</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="merge" class="heading-element"><span>MERGE</span>
  <a href="#merge" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>合并节点或者关系，属于先读后写操作，相当于MATCH + CREATE，先检查数据库中节点/关系是否存在，如果存在的话就不再创建，反之执行CREATE。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// 给节点a, b建立关系，如果a,b已经存在，就无需新建。 
</span></span><span class="line"><span class="cl">MATCH (a:Person {name:&#34;Finger&#34;}), (b:Person{name:&#34;Jack Ma&#34;}) MERGE (a)-[:KNOWS]-&gt;(b)</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="nt">&#34;friends&#34;</span><span class="p">:[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Bob&#34;</span><span class="p">,</span> <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;book&#34;</span><span class="p">:[{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;book1&#34;</span><span class="p">,</span> <span class="nt">&#34;year&#34;</span><span class="p">:</span><span class="mi">2000</span><span class="p">},</span> <span class="p">{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;book3&#34;</span><span class="p">,</span> <span class="nt">&#34;year&#34;</span><span class="p">:</span><span class="mi">1990</span><span class="p">}]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="nt">&#34;friends&#34;</span><span class="p">:[</span><span class="mi">1</span><span class="p">],</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Alice&#34;</span><span class="p">,</span> <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">29</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;book&#34;</span><span class="p">:[{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;book1&#34;</span><span class="p">,</span> <span class="nt">&#34;year&#34;</span><span class="p">:</span><span class="mi">2000</span><span class="p">},</span> <span class="p">{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;book2&#34;</span><span class="p">,</span> <span class="nt">&#34;year&#34;</span><span class="p">:</span><span class="mi">1999</span><span class="p">}]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="nt">&#34;friends&#34;</span><span class="p">:[</span><span class="mi">2</span><span class="p">],</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;book&#34;</span><span class="p">:[{</span><span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;book3&#34;</span><span class="p">,</span> <span class="nt">&#34;year&#34;</span><span class="p">:</span><span class="mi">1990</span><span class="p">}]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="删除节点" class="heading-element"><span>删除节点</span>
  <a href="#%e5%88%a0%e9%99%a4%e8%8a%82%e7%82%b9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>语法：MATCH (节点名：标签) DELETE 节点名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (p:Persion) WHERE p.name = &#34;Finger&#34; DELETE p</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查找节点" class="heading-element"><span>查找节点</span>
  <a href="#%e6%9f%a5%e6%89%be%e8%8a%82%e7%82%b9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>语法：MATCH (变量名：匹配的标签) WHERE 过滤结果 RETURN 返回特定结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (p:Persion) WHERE p.name = &#34;Finger&#34; RETURN p.name</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="更新节点" class="heading-element"><span>更新节点</span>
  <a href="#%e6%9b%b4%e6%96%b0%e8%8a%82%e7%82%b9" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><p>语法：MATCH (变量名: 匹配的标签) WHERE 过滤结果 SET 变量名.属性名=值 RETURN 变量名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (p:Persion) WHERE p.name = &#34;Finger&#34; SET p.city = &#34;ChangSha&#34; RETURN p</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="limit" class="heading-element"><span>LIMIT</span>
  <a href="#limit" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">MATCH (p:Persion) RETURN p LIMIT 10</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="heading-element"><span>参考</span>
  <a href="#%e5%8f%82%e8%80%83" class="heading-mark">
    <svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg>
  </a>
</h2><ul>
<li><a href="http://neo4j.com.cn/public/docs/index.html"target="_blank" rel="external nofollow noopener noreferrer">http://neo4j.com.cn/public/docs/index.html</a></li>
</ul>]]></description>
</item>
<item>
  <title>GitLab最佳实践--集成JIRA</title>
  <link>https://hellofinger.tech/2020/02/gitlab-integrate-jira/</link>
  <pubDate>Fri, 28 Feb 2020 18:11:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/02/gitlab-integrate-jira/</guid>
  <description><![CDATA[为什么要集成JIRAJIRA是项目管理的工具，GitLab是代码的管理工具，将两者集成可以实现项目管理和开发的结合。开发人员的每一次代码变更都可以反应到JIRA ISSUE的comment中。并且生成相互关联的链接。大大方便了相关问题跟踪。另外开发人员也可以直接通过Git commit 关闭 JIRA ISSUE。 简化了在JIRA上的操作。
如何集成配置JIRA为GitLab创建一个拥有访问权限的JIRA账号或者是API Token。本文以API Token为例。 配置GitLab找到项目菜单 Settings =&gt; Integrations =&gt; Project services =&gt; Jira。
勾选服务选项，填写JIRA的配置信息。然后点击保存，激活JIRA服务。
以上是在某一个具体项目配置JIRA。如果我们有几十，几百个项目，则可以在Admin菜单Service Templates配置JIRA ，这样以后新创建的代码仓库都会自动激活JIRA服务。不必要每个项目都重复操作一遍。(如果是已经存在的未激活JIRA服务的项目，则Service Template没有效果，需要重新在项目内激活)
如果JIRA是本地服务，会提示网络错误。
需要在管理员界面，配置允许本地访问，加上本地IP地址。
测试集成在JIRA创建Project 和 Issue。
在GitLab提交一个新文件。comment 必须带有JIRA ISSUE的ID(GJI-1)。
我们回到JIRA ISSUE ID的详情页面。一切ok的情况下，comment会有GitLab的变更记录。
最后我们测试一下通过在提交和合并请求中使用触发词，直接关闭JIRA ISSUE。 目前支持三个触发词：
Resolves PROJECT-1 Closes PROJECT-1 Fixes PROJECT-1 ]]></description>
</item>
<item>
  <title>GitLab最佳实践--强制代码包含版本信息</title>
  <link>https://hellofinger.tech/2020/02/gitlab-code-header-include-copyright/</link>
  <pubDate>Tue, 25 Feb 2020 18:11:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/02/gitlab-code-header-include-copyright/</guid>
  <description><![CDATA[需求概述要求开发人员上传的代码文件头部必须包含版权信息，否则阻止代码上传到Git仓库。
解决方案还是基于Git Hooks的方式，在服务器端通过脚本控制Git Push的内容。
具体思路1、获取到Git 提交的文件以及文件内容。
2、过滤文件后缀，检索文件内容，匹配关键字信息(如 Copyright)。并获取到关键字所在的文件行数。
3、具体逻辑判断，例如：Copyright必须在文件内容前10行以内。
代码实现1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 exitcode=&#39;0&#39; FILES=`git diff --name-status $oldrev $newrev | awk &#39;{print $2}&#39;` # 遍历客户端Git Push的文件 for filepath in $FILES; do if [ &#34;$filepath&#34; = &#34;.gitallowed&#34; ]; then echo &#34;Skipping $filepath .]]></description>
</item>
<item>
  <title>GitLab最佳实践--服务器端使用git-secrets</title>
  <link>https://hellofinger.tech/2020/02/gitlab-server-using-git-secrets/</link>
  <pubDate>Sat, 22 Feb 2020 18:11:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/02/gitlab-server-using-git-secrets/</guid>
  <description><![CDATA[GitLab 服务器端使用git-secrets随着互联网的快速发展，信息安全问题也变得越来越重要，对于代码仓库管理员来说，我们需要通过代码扫描工具防止开发者将企业系统中的账号密码和其他敏感信息提交到Git仓库。从而避免这些敏感信息泄露到互联网。
AWS的git-secrets（https://github.com/awslabs/git-secrets)。提供了一种扫描代码文件的方法。下面我分享一下我们项目组使用git-secrets的一些经验。
起初，我们要求所有开发在本地安装git-secrets工具，这样能使他们在commit/push代码的时候及时发现代码中是否存在敏感信息，若是存在则会阻止代码推送到Git服务器仓库。真的这样是一种很好的方式。但是在实施的过程中还是存在开发人员将敏感信息写在代码中，并且上传到GitHub（是的，最早我们没有自建代码仓库，使用了GitHub私有仓库）。
后来，我们搭建了私有GitLab，将GItHub代码仓库迁移到了GitLab。并且在GitLab服务器安装git-secrets。通过编写扫描脚本，定时扫描所有代码仓库，将扫描结果以邮件形式发送给所有开发人员。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def scan_all_repository(): root = &#34;/var/opt/gitlab/git-data/repositories&#34; cmd = &#34;find {} -name &#39;*.git&#39;&#34;.format(root) status_code, output = subprocess.getstatusoutput(cmd) result = [] if status_code == 0: files = output.split(&#34;\n&#34;) total = len(files) for idx, name in enumerate(files): if idx % 10 == 0: print(&#34;[{}] This is {}/{}&#34;.format(datetime.datetime.now(), idx, total)) os.]]></description>
</item>
<item>
  <title>GitLab最佳实践--CI/CD之Pipeline(四)</title>
  <link>https://hellofinger.tech/2020/02/gitlab-cicd-pipeline-4/</link>
  <pubDate>Thu, 20 Feb 2020 18:11:52 &#43;0000</pubDate>
  <author>Finger</author>
  <guid>https://hellofinger.tech/2020/02/gitlab-cicd-pipeline-4/</guid>
  <description><![CDATA[Only / Exceptonly 和 except用于定义Pipeline Job应该什么时候执行或者不执行。
only 定义需要执行的分支或标签 except 定义不执行的分支或标签 以下为用法规则：
only和except如果都存在在一个Pipepline Job声明中，则所需引用(ref)将会被only和except所定义的分支过滤. only和except允许使用正则表达式 only和except允许使用指定仓库地址，但是不forks仓库 only和except 允许使用的特殊关键字：
值 描述 branches 当目标分支执行push操作时 tags 当目标分支打tag标记时 api 当一个pipeline被另一个pipeline api所触发时 external 当使用了GitLab以外的外部CI服务，如Jenkins pipelines 针对多项目触发器而言，当使用CI_JOB_TOKEN并使用gitlab所提供的api创建多个pipelines的时候 pushes 当pipeline被用户的git push操作所触发的时候 schedules 针对预定好的pipline而言 triggers 用token创建pipline的时候 web 在GitLab页面上pipeline标签页下，点击Run Pileline按钮时 merge_requests 当用户发起合并请求时 chat 对于使用GitLab ChatOps命令时 接下来看一个简单的例子，定义一个仅在feature分支才触发job，而其他分支都不执行。
1 2 3 4 5 job: script: - echo &#39;Hello, Only / Except&#39; only: - feature 添加test.txt文件后，可以看到job开始执行。
再来看一个使用正则表达式的例子。
1 2 3 4 5 job: script: - echo &#39;Test regular expression&#39; only: - /^issue-.]]></description>
</item>
</channel>
</rss>
